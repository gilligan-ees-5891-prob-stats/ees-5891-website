\documentclass[11pt,twoside]{jgsyllabus}
\usepackage{booktabs}
%\usepackage{tabularx}
\usepackage{multirow}

\makeatletter
\g@addto@macro{\UrlBreaks}{\UrlOrds}
\makeatother

\setlength{\aboverulesep}{0.2ex}
\setlength{\belowrulesep}{0.2ex}
\setlength{\extrarowheight}{0.1ex}
\setlength{\heavyrulewidth}{1pt}
\setlength{\lightrulewidth}{0.05pt}

\newif\ifreading
\readingtrue

\iffalse
\include{CourseInfo}
\fi
<<r setup, include=F>>=
library(pacman)
p_load(knitr)
p_load(magrittr)
p_load(tidyverse)
p_load(xtable)
p_load(assertthat)

knitr::opts_chunk$set(warn=FALSE, message=FALSE, cache=FALSE, error=TRUE)

library(semestr)
# source("../init.R", chdir = TRUE)
@
<<r import_schedule, include=F>>=
chapterpages <- function(chapter, pages, textbook, handout) {
  result = ""
  if (handout) {
    result = str_c(str_trim(result, "right"), "\\ (Handout)")
  }
  if (!is.na(chapter)) {
    result = str_c(result, " ",
                   str_replace_all(chapter, "\\bCh\\.[[:space:]]+", "Ch.~"))
  }
  if (!is.na(pages)) {
    result = str_c(result, " ", str_replace_all(pages, "p\\.[[:space:]]+", "p.~"))
  }
  result
}

restrictions <- function(opt, undergrad_only, grad_only) {
  ret <- ""
  if (opt) {
    ret <- "\\ (optional)"
  } else if (grad_only) {
    ret <- "\\ (grad students only)"
  } else if (undergrad_only) {
    ret <- "\\ (undergrads only)"
  }
  ret
}

format_reading_item <- function(df) {
  df %>% rowwise() %>%
    mutate(reading = str_c(
      # ifelse(break_before, "\\\\",""),
      ifelse(textbook, "\\emph{", ""),
      title,
      ifelse(textbook, "\\/}", ""),
      chapterpages(chapter, pages, textbook, handout)
    )) %>%
    ungroup() %>%
    mutate(reading = str_replace_all(reading, "(\\\\[a-zA-Z]+) +Ch\\.", "\\1\\\\ Ch."))
}



semester <- load_semester_db("../EES-5891.sqlite3", ignore_root = TRUE)

is_fall_semester <- semester$calendar$date[[1]] %>% month() > 7

collapse_handouts <- function(strings, handout) {
  ret_val <- "Handouts (on Brightspace)"
  if (! all(handout)) {
    ret_val <- str_c(strings, collapse = ", ")
  }
  ret_val
}

reading <- semester$rd_items %>%
  select(rd_item_id, rd_grp_key, title = short_latex_title, chapter, pages,
         textbook, handout, optional, undergraduate_only, graduate_only,
         rd_break_before) %>%
  format_reading_item() %>% filter(! is.na(reading)) %>%
  arrange(rd_grp_key, handout, optional, graduate_only, undergraduate_only) %>%
  group_by(rd_grp_key, handout) %>%
  summarize(reading = collapse_handouts(reading, handout), .groups = "drop") %>%
  arrange(rd_grp_key, handout) %>% group_by(rd_grp_key) %>%
  summarize(reading = str_c(reading, collapse = ", ")) %>%
  ungroup()

get_event <- function(class, exam, holiday) {
  res <- ifelse(is.na(holiday),
                ifelse(is.na(exam),
                       NA,
                       exam),
                holiday)
  res
}

schedule <- prepare_schedule(semester)
if (! tibble::has_name(schedule, "key_holiday")) {
  schedule <- schedule %>% mutate(key_holiday = NA_character_)
}
if (! tibble::has_name(schedule, "key_exam")) {
  schedule <- schedule %>% mutate(key_exam = NA_character_)
}
if (! tibble::has_name(schedule, "key_event")) {
  schedule <- schedule %>% mutate(key_event = NA_character_)
}
if (!tibble::has_name(schedule, "id_hw")) {
  schedule <- schedule %>% mutate(id_hw = NA_character_)
}
if (!tibble::has_name(schedule, "id_holiday")) {
  schedule <- schedule %>% mutate(id_holiday = NA_character_)
}
if (!tibble::has_name(schedule, "id_exam")) {
  schedule <- schedule %>% mutate(id_exam = NA_character_)
}
if (!tibble::has_name(schedule, "id_event")) {
  schedule <- schedule %>% mutate(id_event = NA_character_)
}

calendar <- schedule %>%
  filter(! is.na(id_class) | ! is.na(id_holiday) | ! is.na(id_event)) %>%
  left_join(select(semester$class_topics, id_class = cal_id, rd_grp_key,
                   by = "cal_id")) %>%
  left_join(reading, by = "rd_grp_key") %>%
  arrange(date, id_class) %>%
  mutate(cal_id = seq_along(date),
         date = ymd(date), weekday = wday(date, label = TRUE),
         month = month(date, label = TRUE), day = mday(date),
         event = get_event(key_class, key_event, key_holiday),
         reading = replace_na(reading, "No reading")) %>%
  select(cal_id, class_num, date, weekday, month, day, topic, reading, event)

if (is_fall_semester) {
  short_holiday_keys <- "FALL_BREAK" # one-day
  long_holiday_keys <- "THANKSGIVING_BREAK" # multi-day
} else {
  short_holiday_keys <- "MLK_DAY" # one-day
  long_holiday_keys <- "SPRING_BREAK" # multi-day
}

midterm <- calendar %>% filter(event %in% c("MIDTERM_TEST", "MIDTERM_EXAM"))
short_holiday <- calendar %>% filter(event %in% short_holiday_keys)
long_holiday <- calendar %>% filter(event %in% long_holiday_keys)
final_exam <- calendar %>% filter(event == "FINAL_EXAM")
alt_final_exam <- calendar %>% filter(event == "ALT_FINAL_EXAM")
take_home_final_exam <- calendar %>% filter(event == "TAKE_HOME_FINAL_EXAM")

select_class <- function(calendar, class_no) {
  class <- calendar %>% filter(class_num == class_no) %>%
    select(class_num, date, topic) %>%
    mutate(weekday = wday(date, label = TRUE),
           long.weekday = wday(date, label = TRUE, abbr = FALSE),
           month = month(date, label = TRUE),
           long.month = month(date, label = TRUE, abbr = FALSE),
           day = day(date))
  as.list(class)
}

this_sheet <- 1
this_sheet_revision <- NA
first_class <- 1
last_class <- NA

if(is.na(first_class)) first_class <- min(calendar$class_num, na.rm = T)
if (is.na(last_class)) last_class <- max(calendar$class_num, na.rm = T)

first_date <- calendar %>% filter(class_num == first_class) %>% select(date) %>%
  unlist() %>% lubridate::as_date()
last_date <- calendar %>% filter(class_num == last_class) %>% select(date) %>%
  unlist() %>% lubridate::as_date()

year_taught <- year(first_date)

format_sheet_number <- function() {
  ifelse(is.null(this_sheet_revision), this_sheet,
         str_c(this_sheet, " (", this_sheet_revision, ")"))
}

format_month <- function(d, abbr = TRUE) {
  m <- month(d, label = TRUE, abbr = abbr)
  if (abbr) m <- str_c(m, ".")
  m
}

format_wday <- function(d, abbr = TRUE) {
  wd <- wday(d, label = TRUE, abbr = abbr)
  if (abbr) wd <- str_c(wd, ".")
  wd
}

format_class_date <- function(d, abbr = TRUE) {
  str_c(format_month(d, abbr = abbr), "~", day(d))
}

format_class_day_date <- function(d, abbr_month = TRUE, abbr_wday = TRUE) {
  str_c(format_wday(d, abbr_wday), ", ",
         format_month(d, abbr_month), "~", day(d))
}

format_date_range_by_class_no <- function(calendar, classes, abbr = TRUE) {
  dates <- calendar %>% filter(class_num %in% na.omit(classes)) %>%
    summarize(start = min(date, na.rm = T), stop = max(date, na.rm = T))
  with(dates, {
    output <- format_class_date(start, abbr)
    if(start != stop) {
      output <- str_c(str_trim(output), "--",
             ifelse(month(stop) == month(start), day(stop),
                    format_class_date(stop, abbr)))
    }
  output
  })
}

format_date_range_by_topic_id <- function(calendar, topics, abbr = TRUE) {
  dates <- calendar %>% filter(topic_id %in% topics) %>%
    summarize(start = min(date, na.rm = T), stop = max(date, na.rm = T))
  with(dates, {
    output <- format_class_date(start, abbr)
    if(start != stop) {
      output <- str_c(str_trim(output), "--",
             ifelse(month(stop) == month(start), day(stop),
                    format_class_date(stop, abbr)))
    }
  })
  output
}

format_date_range_by_event_id <- function(calendar, event_ids, abbr = TRUE) {
  dates <- calendar %>% filter(event %in% event_ids) %>%
    select(date) %>%
    summarize(start = min(date, na.rm = T), stop = max(date, na.rm = T))
  with(dates, {
    output <- format_class_date(start, abbr)
    if(start != stop) {
      output <- str_c(str_trim(output), "--",
             ifelse(month(stop) == month(start), day(stop),
                    format_class_date(stop, abbr)))
    }
  output
  })
}

format_day_date_range_by_event_id <- function(calendar, event_ids,
                                              abbr_month = TRUE, abbr_wday = TRUE) {
  dates <- calendar %>% filter(event %in% event_ids) %>%
    select(date) %>%
    summarize(start = min(date, na.rm = T), stop = max(date, na.rm = T))
  with(dates, {
    output <- format_class_day_date(start, abbr_month, abbr_wday)
    if (start != stop) {
      output <- str_c(output, "--",
                       format_class_day_date(stop, abbr_wday))
    }
  output})
}


fixup_nl <- function(txt) {
  txt <- str_trim(txt)
  txt[str_detect(txt, "[^\n]$")] <- str_c(txt, "\n")
  txt
}

make_section <- function(cal_entry) {
  d <- cal_entry$date
  str_c("\\section[",
         format_class_date(d, abbr = TRUE),
         "]{",
         format_class_day_date(d, TRUE, TRUE),
         ": ",
         cal_entry$topic,
         "}\n")
}

make_reading_assignment <- function(reading_entry) {
  output <- "\\subsection{Reading}"
  if (is.na(reading_entry$reading)) {
    output <- str_c(str_trim(output),
                   "No new reading for today.",
                   "", sep = "\n")
  } else {
    output <- str_c(str_trim(output),
                   "\\begin{itemize}",
                   str_trim(reading_entry$reading),
                   "\\end{itemize}",
                   "", sep = "\n")
  }
    if (! is.na(reading_entry$extra_reading)) {
    output <- str_c(str_trim(output),
                    "\\subsection{Optional Extra Reading}",
                    "\\begin{itemize}",
                    fixup_nl(reading_entry$extra_reading),
                    "\\end{itemize}",
                    "", sep = "\n"
    )
  }
  if (! is.na(reading_entry$reading_notes)) {
    output <- with(reading_entry,
                   str_c(str_trim(output), "",
                    ifelse(is.na(reading) & is.na(extra_reading),
                           "\\subsection{Notes}",
                           "\\subsection{Reading Notes}"),
                    str_trim(reading_notes),
                    "", sep = "\n"))
  }
  output
}

make_homework_assignment <- function(homework_entries) {
  grad_hw <- homework_entries %>%
    filter(graduate_only & ! is.na(homework))
  ugrad_hw <- homework_entries %>%
    filter(undergraduate_only & ! is.na(homework))
  everyone_hw <- homework_entries %>%
    filter(!graduate_only & ! undergraduate_only & ! is.na(homework))
  grad_notes <- homework_entries %>%
    filter(graduate_only & ! is.na(homework_notes))
  ugrad_notes <- homework_entries %>%
    filter(undergraduate_only & ! is.na(homework_notes))
  everyone_notes <- homework_entries %>%
    filter(!graduate_only & ! undergraduate_only & ! is.na(homework_notes))
  output <- str_c("\\subsection{Homework}",
         "A the beginning of class today, turn in the following homework:",
         "\\begin{itemize}",
         "", sep = "\n")
    if (nrow(ugrad_hw) > 0) {
      output <- str_c(str_trim(output),
                       str_c("\\item \\textbf{Undergraduate Students:} ",
                             str_trim(ugrad_hw$homework)),
                      "", sep = "\n")
    }
    if (nrow(grad_hw) > 0) {
      output <- str_c(str_trim(output),
                       str_c("\\item \\textbf{Graduate Students:} ",
                             str_trim(grad_hw$homework)),
                      "", sep = "\n")
    }
    if (nrow(everyone_hw) > 0) {
      output <- str_c(str_trim(output),
                       str_c("\\item \\textbf{Everyone:} ",
                             str_trim(everyone_hw$homework)),
                       "", sep = "\n")
    }
    output <- str_c(str_trim(output),
                    "\\end{itemize}",
                    "", sep = "\n")

    if (nrow(grad_notes) > 0 || nrow(ugrad_notes) > 0 || nrow(everyone_notes) > 0) {
      output <- str_c(str_trim(output),
                      "\\subsection{Notes on Homework}\n",
                      "", sep = "\n")
      if (nrow(everyone_notes) > 0) {
        output <- str_c(str_trim(output),
                        str_trim(everyone_notes$homework_notes),
                        "", sep = "\n")
      }
      if (nrow(grad_notes) > 0 || nrow(ugrad_notes) > 0) {
        output <- str_c(str_trim(output),
                        "\\begin{itemize}",
                        "", sep = "\n")
        if (nrow(ugrad_notes) > 0) {
          output <- str_c(str_trim(output),
                          str_c("\\item \\textbf{Undergraduate Students:} ",
                                str_trim(ugrad_notes$homework_notes)),
                          "", sep = "\n")
        }
        if (nrow(grad_notes) > 0) {
          output <- str_c(str_trim(output),
                          str_c("\\item \\textbf{Graduate Students:} ",
                                str_trim(grad_notes$homework_notes)),
                          "", sep = "\n")
        }

        output <- str_c(str_trim(output),
                        "\\end{itemize}",
                        "", sep = "\n")
      }
    }
    output
}

make_hw_section <- function(cal_entry) {
  d <- cal_entry$date
  str_c("\\section[",
         format_class_date(d, abbr = TRUE),
         "]{",
         format_class_day_date(d, TRUE, TRUE),
         ": ",
         str_c("Homework \\#", cal_entry$homework_num, ": ", cal_entry$homework_topic),
         "}\n")
}

make_short_hw_assignment <- function(cal_entry) {
  d <- cal_entry$date
  str_c( "\\subsection{Homework}",
         str_c( "Homework \\#", cal_entry$homework_num, ": ", cal_entry$homework_topic,
                " is due today.  See the homework assignment sheet for details."),
         "", sep = "\n" )
}


make_notice <- function(notice_entries) {
  if (length(notice_entries) > 1) {
    output <- str_c("\\subsection{Notices:}",
                    "\\begin{itemize}",
                    str_c("\\item", notice_entries$notice,
                          sep = " ", collapse = "\n"),
                    "\\end{itemize}",
                    "", sep = "\n")
  } else {
    output <- str_c("\\subsection{Notice:}",
                    notice_entries$notice,
                    "", sep = "\n")
  }
  output
}

format_assignment_entry <- function(class_no) {
  cal_entry <- calendar %>% filter(class_num == class_no)
  hw_entry <- homework_assignments %>% filter(class_num == class_no)

  output <- make_hw_section(cal_entry)
  if (cal_entry$has_homework) {
    output <- str_c(str_trim(output),
                    make_homework_assignment(hw_entry),
                    "", sep = "\n")
  }
  knit_expand(text = output, this_class_no = class_no,
              this_class_date = cal_entry$date,
              calendar = calendar,
              delim = c("<%","%>"))
}


format_class_entry <- function(class_no) {
  cal_entry <- calendar %>% filter(class_num == class_no)
  hw_entry <- homework_assignments %>% filter(class_num == class_no)
  reading_entry <- reading_assignments %>% filter(class_num == class_no)
  notice_entry <- notices %>% filter(class_num == class_no)

  output <- make_section(cal_entry)
  if (cal_entry$has_notice) {
    output <- str_c(str_trim(output),
                    make_notice(notice_entry),
                    "", sep = "\n")
  }
  if (cal_entry$has_homework) {
    if(FALSE) {
      output <- str_c(str_trim(output),
                      make_homework_assignment(hw_entry),
                      "", sep = "\n")
    } else {
      output <- str_c(str_trim(output),
                      make_short_hw_assignment(cal_entry),
                      "", sep = "\n")
    }
  }
  if (cal_entry$has_reading) {
    output <-str_c(str_trim(output),
                   make_reading_assignment(reading_entry),
                   "", sep = "\n")
  } else {
    # output <- str_c(str_trim(output),
    #                  "\\subsection{Reading}",
    #                  "No new reading for today.",
    #                  "", sep = "\n")
  }
  knit_expand(text = output, this_class_no = class_no,
              this_class_date = cal_entry$date,
              calendar = calendar,
              delim = c("<%","%>"))
}

@



\SetupHandout
\isbntrue

\renewcommand{\LongCourseName}{\ShortCourseName}%

\title{Syllabus\\
\ShortCourseNumber: \LongCourseName}

\fancyhead[L]{\bfseries\scshape \ShortCourseNumber\ Syllabus}

%
%
%
%
%
%
\begin{document}
\maketitle

\iffalse
\noindent
\textbf{\large \textsc{Note:} This is a draft syllabus, subject to change.}

\fi
\section[Nuts \& Bolts]{Nuts and Bolts}
\label{sec:NutsAndBolts}
\subsection{Class Meetings}
\ClassMeetings
\subsection{Professor}
\label{sec:Professor}
\ProfName\ (\ProfPronouns)\\
\ProfDescr\\
\ProfOffice\\
\ProfEmail\\
\ProfOfficeHours
%
\ifTA
\subsection{Teaching Assistant}
\label{sec:TA}
\TaName\ (\TaPronouns)\\
\TaOfficeLoc\ifTaPhone , \TaPhone\fi\\
\TaEmail\\
\TaOfficeHours
\medskip

\noindent
\TaTitle\ will be grading homework, so address questions about your homework grades
to \TaAccusative.
\fi

\subsection{Email}
\textbf{%
If you want to communicate with
\ifTA
Professor Gilligan or \TaTitle,
\else
me,
\fi
be sure to begin the
subject line of your email with ``{\scshape EES 4670}'' or ``{\scshape EES 5670}''.
}%
This helps assure
that \ifTA we\else I\fi\ will see your message quickly and respond to it.

I have set my email reader to flag all messages like this as important, so I
will read them first. This also assures that I do not mistake your email for
spam. I typically receive over 100 emails per day, so if you do not follow these
instructions I may not notice your email.

\medskip
%\clearpage
\section[Description]{Course Description}

\textbf{\ShortCourseName.}
Fundamentals of probability and statistics for the Earth & Envirommental
Sciences, with applications in \Rstats. Probability distributions, descriptive
statistics, statistical testing, regression analysis, elements of time-series
analysis and multivariate statistics, principal components analysis,
reproducible research methods, principles of statistical computing using \Rstats.
[3](MNS)

\subsection{Prerequisites}

You should be familiar with differential calculus and linear algebra.
I will review basic concepts, but the course will be difficult for you if you
are completely unfamiliar with these areas of math.

This course will be mathematical and will make extensive use of the \Rstats\
software system, but
\textbf{I do not assume} that you already know \Rstats\ or advanced
mathematics beyond calculus and linear algebra.

\iftrue
\section[Goals]{Goals for the Course}
My goals for this course are that at the end of the semester:
\begin{itemize}
\item You will understand theories of probability and be familiar with the
  properties of discrete and continuous probability distributions.
\item You will understand what the Normal probability distribution is, and why
  it plays a central role in probability and statistics.
\item You will be able to perform descriptive statistical analyses of data.
\item You will be able to use statistical tests to test propositions about data,
  such as identifying differences between data collected from different sources
  or under different conditions.
\item You will be able to estimate the parameters of probability distributions
  from observed data.
\item You will be able to analyze time-series data.
\item You will be able to analyze sets of multiple variables,
  such as measurements of multiple elements or isotopes from each of a number
  of samples.
\item You will be skilled at organizing and managing your data analysis projects
  using Reproducible Research methods.

  Increasingly, journals and funding agencies require researchers to use
  reproducible research methods, so that other people can easily review and
  understand how the analysis was conducted, and so that if questions
  arise---even years later---it will be straightforward to go back and
  understand exactly how the analysis was conducted.
\end{itemize}
\fi
%
%
%
% \clearpage
%
%
%
% \pagebreak
\subsection{Reading Material}
There are two required textbooks:

From time to time during the term, I will assign supplementary reading on the
Internet or in handouts that I will post to the class web site.

\subsubsection{Textbooks}
\begin{itemize}
	 %
	 \item \LongJEGbook.

     This will be the main textbook for most of the semester. The book is
     published open-access and you can download the PDF for free from
     \url{\JEGurl}, Brightspace, or the course web site, at \url{\altJEGurl}.


  \item \LongWickham.

    This book is the best practical introduction I have found for getting
    started with \Rstats\ and getting things done in data analysis.
    The author is the chief data scientist as the Posit company and wrote a huge
    number of widely used free packages to extend and enrich \Rstats.
    This book follows his philosophy of how to organize data sensibly for
    analyzing and presenting it.

    You can buy a paper copy, if you wish, but the full text is available for
    free online at \url{\WickhamURL}

\end{itemize}

\subsubsection{Course Web Site}

In addition to Brightspace, I have set up a companion web site for this
course at \url{\classURL},
where I post the reading and homework assignments,
my slides from class, and other useful material. That web site will be the
central place to keep up with material for the course during the semester.
This web site will direct you to Brightspace if there is anything you need to
find there.

## Computer Software {#software}

For this class, we will work in \Rstats,
and I strongly recommend that you install
the free version of RStudio Desktop for working with \Rstats.
All the software we will use this semester is free and can be downloaded and
installed on Windows, Mac, and Linux systems. You can find details at the
\href{\classURL/tools/}{"Tools" page} of the course web site at
\url{\classURL}.

We will also use the \git\ revision control software as part of our
Reproducible Research practice. You will use this to manage files
for assignments and the semester research project.
I will spend a class explaining why we use \git, and how
to use it effectively for your homework and other projects.

\section{Assignments}

\subsection[Reading assignments]{Overview of reading assignments}

I will post detailed reading assignments to the course website
\url{\classURL}
that give specific pages to read for each class
and notes on important things you should understand.
**I expect you to complete the reading before you come to class on the day
for which the reading is assigned**,
so you can participate in discussions of the
assigned material and ask questions if there are things you don't understand.

\subsection{Graded Work}

\subsubsection{Homework}

Homework assignments will be posted on the course web site, and must be
submitted by the beginning of class on the day it's due.

You will turn in homework to Brightspace or \GitHub\ as indicated on the
assignment.

\subsubsection{Project}

In the second half of the semester, you will do a research project, in which you
will choose a data set that's interesting to you and apply statistical methods to
analyze it. You will present the results of your project in class during the
last week of the semester and turn in a written report about your project.

You may examine data from a research project you're working on, or it can be data
from a public data source that you are interested in understanding better.

\subsubsection[Tests \& Exams}{Tests and Examinations}

There will not be any tests or examinations in this course. Your grade will be
based on class participation, homework, modeling projects, and in-class
presentations.

\subsection[Grades]{Basis for Grading}

\begin{tabular}{|lr|}
\hline
Class participation &  5\% \\
Homework            & 45\% \\
Research Project    & 50\% \\
\hline
\end{tabular}

\section{Final Note}

This is the first time I have taught this course, and during the term, I will
assess how things are going, and may change the assignments and sequence of
readings to help you get the most out of it.

